version: "3.9"

#volumes:
#  postgres:
#  api:
#
#networks:
#  back:
#  front:

services:
  postgres:
    image: postgres:12.4-alpine
    restart: always
    env_file:
      - .env
#    environment:
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_DB: ${POSTGRES_NAME}
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    networks:
      - backend_nw

volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge

#  migrations:
#    build:
#      context: todolist
#    depends_on:
#      postgres:
#        condition: service_healthy
#    command: python manage.py migrate
#    networks:
#      - back

#  api:
#    build:
#      context: todolist
#    restart: always
#    volumes:
#      - ./:/app
#    env_file:
#      - todolist/.env
#    command: python manage.py runserver 0.0.0.0:8000
#    ports:
#      - "8000:8000"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      migrations:
#        condition: service_completed_successfully
#    networks:
#      - back
#      - front

#  bot:
#    build:
#      context: .
#    depends_on:
#      postgres:
#        condition: service_healthy
#      migrations:
#        condition: service_completed_successfully
#    volumes:
#      - ./:/app
#    command: python manage.py runbot
#    networks:
#      - back
#      - front

#  front:
#    image: sermalenk/skypro-front:lesson-38
#    restart: always
#    ports:
#      - "8080:80"
#    depends_on:
#      - api
#    networks:
#      - back
#      - front